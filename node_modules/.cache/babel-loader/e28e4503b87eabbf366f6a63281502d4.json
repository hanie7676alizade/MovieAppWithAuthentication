{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/HOC/WithPopUp/index.tsx\";\nimport { Fragment, useRef, useState, useEffect } from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport { setPopUp } from \"redux/Common/slice\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport classes from \"./style.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WithPopUp(WrappedComponent) {\n  var _s = $RefreshSig$();\n\n  const Component = props => {\n    _s();\n\n    const sectionRef = useRef(null);\n    const dispatch = useAppDispatch();\n    const {\n      popUpState,\n      popUpButtons,\n      popUpText\n    } = useAppSelector(state => state.Common);\n    const [state, setState] = useState(false);\n\n    const toggleModal = () => {\n      setState(!state);\n      if (popUpState && state) dispatch(setPopUp({\n        state: false,\n        text: \"\",\n        buttons: []\n      }));\n    };\n\n    const dosomeThing = item => {\n      item.onClick();\n      toggleModal();\n    };\n\n    useEffect(() => {\n      popUpState && toggleModal();\n    }, [popUpState]);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        centered: true,\n        isOpen: state && popUpState,\n        toggle: toggleModal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: toggleModal,\n          children: \"Modal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: popUpText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          className: classes.buttons,\n          children: popUpButtons.map((item, index) => /*#__PURE__*/_jsxDEV(Button, {\n            color: item.color,\n            size: \"md\",\n            onClick: () => item.isCloseBTN ? toggleModal() : dosomeThing(item),\n            children: item.value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WrappedComponent, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Component, \"re0aqT0nNTH9v8Dsd8vHDX6I//g=\", false, function () {\n    return [useAppDispatch, useAppSelector];\n  });\n\n  return Component;\n}\n_c = WithPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithPopUp\");","map":{"version":3,"names":["Fragment","useRef","useState","useEffect","Button","Modal","ModalBody","ModalFooter","ModalHeader","setPopUp","useAppDispatch","useAppSelector","classes","WithPopUp","WrappedComponent","Component","props","sectionRef","dispatch","popUpState","popUpButtons","popUpText","state","Common","setState","toggleModal","text","buttons","dosomeThing","item","onClick","map","index","color","isCloseBTN","value"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/HOC/WithPopUp/index.tsx"],"sourcesContent":["import { Fragment, useRef, ComponentType, useState, useEffect } from \"react\";\r\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\n\r\nimport { setPopUp } from \"redux/Common/slice\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport { IpopUpBTN } from \"types/types\";\r\nimport classes from \"./style.module.scss\";\r\n\r\nexport default function WithPopUp<T>(WrappedComponent: ComponentType<T>) {\r\n  const Component = (props: T) => {\r\n    const sectionRef = useRef(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { popUpState, popUpButtons, popUpText } = useAppSelector(\r\n      (state) => state.Common\r\n    );\r\n\r\n    const [state, setState] = useState<boolean>(false);\r\n\r\n    const toggleModal = () => {\r\n      setState(!state);\r\n      if (popUpState && state)\r\n        dispatch(setPopUp({ state: false, text: \"\", buttons: [] }));\r\n    };\r\n\r\n    const dosomeThing = (item: IpopUpBTN) => {\r\n      item.onClick();\r\n      toggleModal();\r\n    };\r\n\r\n    useEffect(() => {\r\n      popUpState && toggleModal();\r\n    }, [popUpState]);\r\n\r\n    return (\r\n      <Fragment>\r\n        <Modal centered isOpen={state && popUpState} toggle={toggleModal}>\r\n          <ModalHeader toggle={toggleModal}>Modal</ModalHeader>\r\n          <ModalBody>\r\n            <span>{popUpText}</span>\r\n          </ModalBody>\r\n          <ModalFooter className={classes.buttons}>\r\n            {popUpButtons.map((item, index) => (\r\n              <Button\r\n                key={index}\r\n                color={item.color}\r\n                size=\"md\"\r\n                onClick={() =>\r\n                  item.isCloseBTN ? toggleModal() : dosomeThing(item)\r\n                }\r\n              >\r\n                {item.value}\r\n              </Button>\r\n            ))}\r\n          </ModalFooter>\r\n        </Modal>\r\n        {/* )} */}\r\n        <WrappedComponent {...props} />\r\n      </Fragment>\r\n    );\r\n  };\r\n  return Component;\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA0CC,QAA1C,EAAoDC,SAApD,QAAqE,OAArE;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,WAAhD,QAAmE,YAAnE;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,aAA/C;AAEA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,eAAe,SAASC,SAAT,CAAsBC,gBAAtB,EAA0D;EAAA;;EACvE,MAAMC,SAAS,GAAIC,KAAD,IAAc;IAAA;;IAC9B,MAAMC,UAAU,GAAGhB,MAAM,CAAC,IAAD,CAAzB;IAEA,MAAMiB,QAAQ,GAAGR,cAAc,EAA/B;IAEA,MAAM;MAAES,UAAF;MAAcC,YAAd;MAA4BC;IAA5B,IAA0CV,cAAc,CAC3DW,KAAD,IAAWA,KAAK,CAACC,MAD2C,CAA9D;IAIA,MAAM,CAACD,KAAD,EAAQE,QAAR,IAAoBtB,QAAQ,CAAU,KAAV,CAAlC;;IAEA,MAAMuB,WAAW,GAAG,MAAM;MACxBD,QAAQ,CAAC,CAACF,KAAF,CAAR;MACA,IAAIH,UAAU,IAAIG,KAAlB,EACEJ,QAAQ,CAACT,QAAQ,CAAC;QAAEa,KAAK,EAAE,KAAT;QAAgBI,IAAI,EAAE,EAAtB;QAA0BC,OAAO,EAAE;MAAnC,CAAD,CAAT,CAAR;IACH,CAJD;;IAMA,MAAMC,WAAW,GAAIC,IAAD,IAAqB;MACvCA,IAAI,CAACC,OAAL;MACAL,WAAW;IACZ,CAHD;;IAKAtB,SAAS,CAAC,MAAM;MACdgB,UAAU,IAAIM,WAAW,EAAzB;IACD,CAFQ,EAEN,CAACN,UAAD,CAFM,CAAT;IAIA,oBACE,QAAC,QAAD;MAAA,wBACE,QAAC,KAAD;QAAO,QAAQ,MAAf;QAAgB,MAAM,EAAEG,KAAK,IAAIH,UAAjC;QAA6C,MAAM,EAAEM,WAArD;QAAA,wBACE,QAAC,WAAD;UAAa,MAAM,EAAEA,WAArB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE,QAAC,SAAD;UAAA,uBACE;YAAA,UAAOJ;UAAP;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAFF,eAKE,QAAC,WAAD;UAAa,SAAS,EAAET,OAAO,CAACe,OAAhC;UAAA,UACGP,YAAY,CAACW,GAAb,CAAiB,CAACF,IAAD,EAAOG,KAAP,kBAChB,QAAC,MAAD;YAEE,KAAK,EAAEH,IAAI,CAACI,KAFd;YAGE,IAAI,EAAC,IAHP;YAIE,OAAO,EAAE,MACPJ,IAAI,CAACK,UAAL,GAAkBT,WAAW,EAA7B,GAAkCG,WAAW,CAACC,IAAD,CALjD;YAAA,UAQGA,IAAI,CAACM;UARR,GACOH,KADP;YAAA;YAAA;YAAA;UAAA,QADD;QADH;UAAA;UAAA;UAAA;QAAA,QALF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAsBE,QAAC,gBAAD,OAAsBhB;MAAtB;QAAA;QAAA;QAAA;MAAA,QAtBF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EA0BD,CApDD;;EADuE,GACjED,SADiE;IAAA,QAIpDL,cAJoD,EAMrBC,cANqB;EAAA;;EAsDvE,OAAOI,SAAP;AACD;KAvDuBF,S"},"metadata":{},"sourceType":"module"}