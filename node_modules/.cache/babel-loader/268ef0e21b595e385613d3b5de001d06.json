{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/components/screens/AuthPages/RegisterForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { Form, FormFeedback, FormGroup, Input, Label, Button } from \"reactstrap\";\nimport classes from \"./RegisterForm.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object({\n  email: yup.string().required(\"this field is required\").matches(/^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/, \"Enter a valid Email Address\"),\n  password: yup.string().required(\"this field is required\").min(4, \"Password is too short - should be 4 chars minimum.\"),\n  confirmPassword: yup.string().required(\"this field is required\").min(4, \"Password is too short - should be 4 chars minimum.\").oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n}).required();\n\nconst RegisterForm = props => {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const {\n    control,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    shouldFocusError: true\n  });\n  const [passwordShown, setPasswordShown] = useState(false);\n  const [confirmPasswordShown, setconfirmPasswordShown] = useState(false);\n\n  const onSubmit = async data => {\n    props.onSubmit(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: classes.form,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.formGroup,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"email\",\n        children: \"Email Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller // id=\"email\"\n      , {\n        name: \"email\",\n        control: control,\n        render: _ref => {\n          let {\n            field\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Input, {\n            type: \"email\",\n            ...field,\n            invalid: !!errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n        className: classes.errText,\n        children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.formGroup,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"password\",\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"password\",\n        control: control,\n        render: _ref2 => {\n          let {\n            field\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Input, { ...field,\n            invalid: !!errors.password,\n            type: passwordShown ? \"text\" : \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setPasswordShown,\n        children: \"show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n        className: classes.errText,\n        children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"tkaIB2tmeZoPSx+kboY/Y+P43tY=\", false, function () {\n  return [useForm];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["useState","useForm","Controller","yupResolver","yup","Form","FormFeedback","FormGroup","Input","Label","Button","classes","schema","object","email","string","required","matches","password","min","confirmPassword","oneOf","ref","RegisterForm","props","control","handleSubmit","formState","errors","resolver","shouldFocusError","passwordShown","setPasswordShown","confirmPasswordShown","setconfirmPasswordShown","onSubmit","data","form","formGroup","field","errText","message"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/components/screens/AuthPages/RegisterForm.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport {\n  Form,\n  FormFeedback,\n  FormGroup,\n  Input,\n  Label,\n  Button,\n} from \"reactstrap\";\n\nimport { IUserRegisterForm } from \"types/types\";\nimport classes from \"./RegisterForm.module.scss\";\n\ninterface Iprops {\n  onSubmit: SubmitHandler<IUserRegisterForm>;\n}\n\nconst schema = yup\n  .object({\n    email: yup\n      .string()\n      .required(\"this field is required\")\n      .matches(\n        /^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/,\n        \"Enter a valid Email Address\"\n      ),\n    password: yup\n      .string()\n      .required(\"this field is required\")\n      .min(4, \"Password is too short - should be 4 chars minimum.\"),\n    confirmPassword: yup\n      .string()\n      .required(\"this field is required\")\n      .min(4, \"Password is too short - should be 4 chars minimum.\")\n      .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\n  })\n  .required();\n\nconst RegisterForm = (props: Iprops) => {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IUserRegisterForm>({\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n  });\n  const [passwordShown, setPasswordShown] = useState<boolean>(false);\n  const [confirmPasswordShown, setconfirmPasswordShown] =\n    useState<boolean>(false);\n\n  const onSubmit = async (data: IUserRegisterForm) => {\n    props.onSubmit(data);\n  };\n\n  return (\n    <Form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup className={classes.formGroup}>\n        <Label htmlFor=\"email\">Email Address:</Label>\n        <Controller\n          // id=\"email\"\n          name=\"email\"\n          control={control}\n          render={({ field }) => (\n            <Input type=\"email\" {...field} invalid={!!errors.email} />\n          )}\n        />\n        <FormFeedback className={classes.errText}>\n          {errors.email?.message}\n        </FormFeedback>\n      </FormGroup>\n      <FormGroup className={classes.formGroup}>\n        <Label htmlFor=\"password\">Password:</Label>\n        <Controller\n          name=\"password\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              {...field}\n              invalid={!!errors.password}\n              type={passwordShown ? \"text\" : \"password\"}\n            />\n          )}\n        />\n        <span onClick={() => setPasswordShown}>show</span>\n\n        <FormFeedback className={classes.errText}>\n          {errors.password?.message}\n        </FormFeedback>\n      </FormGroup>\n      <Button type=\"submit\" color=\"primary\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,EAAiCC,UAAjC,QAAmD,iBAAnD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SACEC,IADF,EAEEC,YAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,MANF,QAOO,YAPP;AAUA,OAAOC,OAAP,MAAoB,4BAApB;;AAMA,MAAMC,MAAM,GAAGR,GAAG,CACfS,MADY,CACL;EACNC,KAAK,EAAEV,GAAG,CACPW,MADI,GAEJC,QAFI,CAEK,wBAFL,EAGJC,OAHI,CAIH,6CAJG,EAKH,6BALG,CADD;EAQNC,QAAQ,EAAEd,GAAG,CACVW,MADO,GAEPC,QAFO,CAEE,wBAFF,EAGPG,GAHO,CAGH,CAHG,EAGA,oDAHA,CARJ;EAYNC,eAAe,EAAEhB,GAAG,CACjBW,MADc,GAEdC,QAFc,CAEL,wBAFK,EAGdG,GAHc,CAGV,CAHU,EAGP,oDAHO,EAIdE,KAJc,CAIR,CAACjB,GAAG,CAACkB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAJQ,EAIqB,sBAJrB;AAZX,CADK,EAmBZN,QAnBY,EAAf;;AAqBA,MAAMO,YAAY,GAAIC,KAAD,IAAmB;EAAA;;EAAA;;EACtC,MAAM;IACJC,OADI;IAEJC,YAFI;IAGJC,SAAS,EAAE;MAAEC;IAAF;EAHP,IAIF3B,OAAO,CAAoB;IAC7B4B,QAAQ,EAAE1B,WAAW,CAACS,MAAD,CADQ;IAE7BkB,gBAAgB,EAAE;EAFW,CAApB,CAJX;EAQA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChC,QAAQ,CAAU,KAAV,CAAlD;EACA,MAAM,CAACiC,oBAAD,EAAuBC,uBAAvB,IACJlC,QAAQ,CAAU,KAAV,CADV;;EAGA,MAAMmC,QAAQ,GAAG,MAAOC,IAAP,IAAmC;IAClDZ,KAAK,CAACW,QAAN,CAAeC,IAAf;EACD,CAFD;;EAIA,oBACE,QAAC,IAAD;IAAM,SAAS,EAAEzB,OAAO,CAAC0B,IAAzB;IAA+B,QAAQ,EAAEX,YAAY,CAACS,QAAD,CAArD;IAAA,wBACE,QAAC,SAAD;MAAW,SAAS,EAAExB,OAAO,CAAC2B,SAA9B;MAAA,wBACE,QAAC,KAAD;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,UAAD,CACE;MADF;QAEE,IAAI,EAAC,OAFP;QAGE,OAAO,EAAEb,OAHX;QAIE,MAAM,EAAE;UAAA,IAAC;YAAEc;UAAF,CAAD;UAAA,oBACN,QAAC,KAAD;YAAO,IAAI,EAAC,OAAZ;YAAA,GAAwBA,KAAxB;YAA+B,OAAO,EAAE,CAAC,CAACX,MAAM,CAACd;UAAjD;YAAA;YAAA;YAAA;UAAA,QADM;QAAA;MAJV;QAAA;QAAA;QAAA;MAAA,QAFF,eAUE,QAAC,YAAD;QAAc,SAAS,EAAEH,OAAO,CAAC6B,OAAjC;QAAA,2BACGZ,MAAM,CAACd,KADV,kDACG,cAAc2B;MADjB;QAAA;QAAA;QAAA;MAAA,QAVF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE,QAAC,SAAD;MAAW,SAAS,EAAE9B,OAAO,CAAC2B,SAA9B;MAAA,wBACE,QAAC,KAAD;QAAO,OAAO,EAAC,UAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,UAAD;QACE,IAAI,EAAC,UADP;QAEE,OAAO,EAAEb,OAFX;QAGE,MAAM,EAAE;UAAA,IAAC;YAAEc;UAAF,CAAD;UAAA,oBACN,QAAC,KAAD,OACMA,KADN;YAEE,OAAO,EAAE,CAAC,CAACX,MAAM,CAACV,QAFpB;YAGE,IAAI,EAAEa,aAAa,GAAG,MAAH,GAAY;UAHjC;YAAA;YAAA;YAAA;UAAA,QADM;QAAA;MAHV;QAAA;QAAA;QAAA;MAAA,QAFF,eAaE;QAAM,OAAO,EAAE,MAAMC,gBAArB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAbF,eAeE,QAAC,YAAD;QAAc,SAAS,EAAErB,OAAO,CAAC6B,OAAjC;QAAA,8BACGZ,MAAM,CAACV,QADV,qDACG,iBAAiBuB;MADpB;QAAA;QAAA;QAAA;MAAA,QAfF;IAAA;MAAA;MAAA;MAAA;IAAA,QAfF,eAkCE,QAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAsB,KAAK,EAAC,SAA5B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAlCF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwCD,CAzDD;;GAAMlB,Y;UAKAtB,O;;;KALAsB,Y;AA2DN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}