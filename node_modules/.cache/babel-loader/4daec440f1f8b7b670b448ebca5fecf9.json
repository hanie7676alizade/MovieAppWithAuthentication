{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/screens/EditMoviePage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { editMovie, getCurrentMovie } from \"redux/Movie/slice\";\nimport { setEmail } from \"redux/Auth/slice\";\nimport MovieForm from \"components/common/MovieForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object({\n  email: yup.string().required(\"this field is required\").matches(/^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/, \"Enter a valid Email Address\"),\n  password: yup.string().required(\"this field is required\").min(4, \"Password is too short - should be 4 chars minimum.\")\n}).required();\n\nconst EditMoviePage = () => {\n  _s();\n\n  const currentMovie = useAppSelector(state => state.Movie.currentMovie);\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.name,\n      description: currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.description\n    },\n    resolver: yupResolver(schema),\n    shouldFocusError: true\n  });\n  const loading = useAppSelector(state => state.Common.loading);\n  const email = useAppSelector(state => state.Auth.email);\n  const params = useParams();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    (!currentMovie || (currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.id.toString()) !== params.id) && !loading && dispatch(getCurrentMovie(params.id));\n\n    if (!email) {\n      const localStorageEmail = localStorage.getItem(\"email\");\n      localStorageEmail && dispatch(setEmail(localStorageEmail));\n    }\n  }, [params.id]);\n\n  const submitForm = data => {\n    console.log({\n      data\n    });\n    dispatch(editMovie({ ...data,\n      id: params.id\n    }));\n  };\n\n  if (currentMovie) return /*#__PURE__*/_jsxDEV(MovieForm, {\n    onSubmit: submitForm,\n    initValue: currentMovie\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n  return null;\n};\n\n_s(EditMoviePage, \"2wBzAzRy7p77teK8BYn6nyuJ8Jw=\", false, function () {\n  return [useAppSelector, useForm, useAppSelector, useAppSelector, useParams, useNavigate, useAppDispatch];\n});\n\n_c = EditMoviePage;\nexport default EditMoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMoviePage\");","map":{"version":3,"names":["useEffect","useNavigate","useParams","yup","useForm","yupResolver","useAppDispatch","useAppSelector","editMovie","getCurrentMovie","setEmail","MovieForm","schema","object","email","string","required","matches","password","min","EditMoviePage","currentMovie","state","Movie","register","handleSubmit","formState","errors","reValidateMode","defaultValues","name","description","resolver","shouldFocusError","loading","Common","Auth","params","navigate","dispatch","id","toString","localStorageEmail","localStorage","getItem","submitForm","data","console","log"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/screens/EditMoviePage/index.tsx"],"sourcesContent":["import { Fragment, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport * as yup from \"yup\";\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { editMovie, getCurrentMovie } from \"redux/Movie/slice\";\nimport { setEmail } from \"redux/Auth/slice\";\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport { IFormValues } from \"types/types\";\nimport MovieForm from \"components/common/MovieForm\";\n\nconst schema = yup\n  .object({\n    email: yup\n      .string()\n      .required(\"this field is required\")\n      .matches(\n        /^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/,\n        \"Enter a valid Email Address\"\n      ),\n    password: yup\n      .string()\n      .required(\"this field is required\")\n      .min(4, \"Password is too short - should be 4 chars minimum.\"),\n  })\n  .required();\n\nconst EditMoviePage = () => {\n  const currentMovie = useAppSelector((state) => state.Movie.currentMovie);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormValues>({\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: currentMovie?.name,\n      description: currentMovie?.description,\n    },\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n  });\n\n  const loading = useAppSelector((state) => state.Common.loading);\n  const email = useAppSelector((state) => state.Auth.email);\n\n  const params = useParams();\n\n  const navigate = useNavigate();\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    (!currentMovie || currentMovie?.id.toString() !== params.id) &&\n      !loading &&\n      dispatch(getCurrentMovie(params.id));\n    if (!email) {\n      const localStorageEmail = localStorage.getItem(\"email\");\n      localStorageEmail && dispatch(setEmail(localStorageEmail));\n    }\n  }, [params.id]);\n\n  const submitForm = (data: IFormValues) => {\n    console.log({ data });\n\n    dispatch(editMovie({ ...data, id: params.id }));\n  };\n\n  if (currentMovie)\n    return <MovieForm onSubmit={submitForm} initValue={currentMovie} />;\n  return null;\n};\nexport default EditMoviePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}