{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/components/screens/AuthPages/LoginForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useForm, Controller } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport classes from \"./RegisterForm.module.scss\"; // import Button from \"components/common/Button\";\n\nimport { Form, FormFeedback, FormGroup, Input, Label, Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object({\n  email: yup.string().required(\"this field is required\").matches(/^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/, \"Enter a valid Email Address\"),\n  password: yup.string().required(\"this field is required\").min(4, \"Password is too short - should be 4 chars minimum.\")\n}).required();\n\nconst RegisterForm = props => {\n  _s();\n\n  var _errors$password;\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({\n    reValidateMode: \"onChange\",\n    resolver: yupResolver(schema),\n    shouldFocusError: true\n  });\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const onSubmit = async data => {\n    props.onSubmit(data);\n  };\n\n  const {\n    ref,\n    ...emailRegister\n  } = register(\"email\"); // console.log(errors, \"ERR\");\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: classes.form,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"email\",\n        children: \"Email Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller // id=\"email\"\n      , {\n        name: \"email\",\n        control: control,\n        render: _ref => {\n          let {\n            field\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Input, {\n            type: \"email\",\n            ...field,\n            invalid: !!errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"password\",\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller // id=\"email\"\n      , {\n        name: \"password\",\n        control: control,\n        render: _ref2 => {\n          let {\n            field\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Input, { ...field\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 34\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n        children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"xlMTaLkKgQFpR20h+XX4MdXpeuQ=\", false, function () {\n  return [useForm];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["useForm","Controller","useState","yupResolver","yup","classes","Form","FormFeedback","FormGroup","Input","Label","Button","schema","object","email","string","required","matches","password","min","RegisterForm","props","register","handleSubmit","control","formState","errors","reValidateMode","resolver","shouldFocusError","passwordShown","setPasswordShown","onSubmit","data","ref","emailRegister","form","field","message"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/components/screens/AuthPages/LoginForm.tsx"],"sourcesContent":["import { useForm, SubmitHandler, Controller } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport { IUserLoginForm } from \"types/types\";\nimport classes from \"./RegisterForm.module.scss\";\n// import Button from \"components/common/Button\";\nimport {\n  Form,\n  FormFeedback,\n  FormGroup,\n  Input,\n  Label,\n  Button,\n} from \"reactstrap\";\n\ninterface Iprops {\n  onSubmit: SubmitHandler<IUserLoginForm>;\n}\n\nconst schema = yup\n  .object({\n    email: yup\n      .string()\n      .required(\"this field is required\")\n      .matches(\n        /^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/,\n        \"Enter a valid Email Address\"\n      ),\n    password: yup\n      .string()\n      .required(\"this field is required\")\n      .min(4, \"Password is too short - should be 4 chars minimum.\"),\n  })\n  .required();\n\nconst RegisterForm = (props: Iprops) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<IUserLoginForm>({\n    reValidateMode: \"onChange\",\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n  });\n  const [passwordShown, setPasswordShown] = useState<boolean>(false);\n\n  const onSubmit = async (data: IUserLoginForm) => {\n    props.onSubmit(data);\n  };\n\n  const { ref, ...emailRegister } = register(\"email\");\n  // console.log(errors, \"ERR\");\n\n  return (\n    <Form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup>\n        <Label htmlFor=\"email\">Email Address:</Label>\n        {/* <Input\n          // autoComplete=\"email\"\n          // id=\"email\"\n          // {...register(\"email\")}\n          id=\"email\"\n          // name=\"email\"\n          type=\"email\"\n          {...emailRegister}\n          innerRef={ref}\n\n          // invalid={!!errors.email}\n          // aria-invalid={!!errors.email}\n        /> */}\n        <Controller\n          // id=\"email\"\n          name=\"email\"\n          control={control}\n          render={({ field }) => (\n            <Input type=\"email\" {...field} invalid={!!errors.email} />\n          )}\n        />\n        {/* <FormFeedback>{errors.email?.message}</FormFeedback> */}\n        {/* {errors.email && <p>{errors.email.message}</p>} */}\n      </FormGroup>\n      <FormGroup>\n        <Label htmlFor=\"password\">Password:</Label>\n        <Controller\n          // id=\"email\"\n          name=\"password\"\n          control={control}\n          render={({ field }) => <Input {...field} />}\n        />\n        {/* <Input\n          {...register(\"password\", { required: true })}\n          // autoComplete=\"current-password\"\n          // type={passwordShown ? \"text\" : \"password\"}\n        /> */}\n        <FormFeedback>{errors.password?.message}</FormFeedback>\n        {/* <span onClick={() => setPasswordShown(!passwordShown)}>show</span>\n        {errors.password && <p>{errors.password.message}</p>} */}\n      </FormGroup>\n      <Button type=\"submit\" color=\"primary\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}