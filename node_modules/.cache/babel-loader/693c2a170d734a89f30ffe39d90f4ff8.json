{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/components/common/MovieForm/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as yup from \"yup\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Form, FormFeedback, FormGroup, Input, Label } from \"reactstrap\";\nimport classes from \"./MovieForm.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object({\n  name: yup.string().required(\"this field is required\"),\n  description: yup.string().required(\"this field is required\").min(16, \"description is too short - should be 16 chars minimum.\"),\n  genre: yup.string().required(\"this field is required\"),\n  realaseDate: yup.number().required(\"this field is required\")\n}).required();\n\nconst MovieForm = props => {\n  _s();\n\n  var _props$initValue, _props$initValue2, _errors$name, _errors$description;\n\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: {\n      errors\n    }\n  } = useForm({\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: (_props$initValue = props.initValue) === null || _props$initValue === void 0 ? void 0 : _props$initValue.name,\n      description: (_props$initValue2 = props.initValue) === null || _props$initValue2 === void 0 ? void 0 : _props$initValue2.description\n    },\n    resolver: yupResolver(schema),\n    shouldFocusError: true\n  });\n  const radioBtnList = [\"Action\", \"Cmedy\", \"Romance\"];\n  console.log(errors);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit(props.onSubmit),\n    className: classes.form,\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.formGroup,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"name\",\n        control: control,\n        render: _ref => {\n          let {\n            field\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Input, { ...field,\n            invalid: !!errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 34\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n        className: classes.ErrText,\n        children: (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        children: \"Genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), radioBtnList.map(item => /*#__PURE__*/_jsxDEV(FormGroup, {\n        check: true,\n        children: /*#__PURE__*/_jsxDEV(Label, {\n          check: true,\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"genre\",\n            control: control,\n            render: _ref2 => {\n              let {\n                field\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(Input, { ...field,\n                value: item,\n                type: \"radio\",\n                name: \"genre\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), item]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        children: \"Realase Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"realaseDate\",\n        control: control,\n        render: _ref3 => {\n          let {\n            field\n          } = _ref3;\n          return /*#__PURE__*/_jsxDEV(Input, { ...field,\n            invalid: true,\n            type: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 34\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.formGroup,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"description\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"description\",\n        render: _ref4 => {\n          let {\n            field\n          } = _ref4;\n          return /*#__PURE__*/_jsxDEV(Input, { ...field,\n            invalid: !!errors.description,\n            type: \"textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n        className: classes.ErrText,\n        children: (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieForm, \"ai60ih8A4X69AgawPgOaB8M3bxY=\", false, function () {\n  return [useForm];\n});\n\n_c = MovieForm;\nexport default MovieForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["yup","useForm","Controller","yupResolver","Button","Form","FormFeedback","FormGroup","Input","Label","classes","schema","object","name","string","required","description","min","genre","realaseDate","number","MovieForm","props","handleSubmit","control","register","formState","errors","reValidateMode","defaultValues","initValue","resolver","shouldFocusError","radioBtnList","console","log","onSubmit","form","formGroup","field","ErrText","message","map","item"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/components/common/MovieForm/index.tsx"],"sourcesContent":["import * as yup from \"yup\";\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport {\n  Button,\n  Form,\n  FormFeedback,\n  FormGroup,\n  Input,\n  Label,\n} from \"reactstrap\";\nimport { IFormValues } from \"types/types\";\nimport classes from \"./MovieForm.module.scss\";\n\nconst schema = yup\n  .object({\n    name: yup.string().required(\"this field is required\"),\n    description: yup\n      .string()\n      .required(\"this field is required\")\n      .min(16, \"description is too short - should be 16 chars minimum.\"),\n    genre: yup.string().required(\"this field is required\"),\n    realaseDate: yup.number().required(\"this field is required\"),\n  })\n  .required();\n\ninterface Iprops {\n  onSubmit: SubmitHandler<IFormValues>;\n  initValue?: IFormValues | undefined;\n}\n\nconst MovieForm = (props: Iprops) => {\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: { errors },\n  } = useForm<IFormValues>({\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: props.initValue?.name,\n      description: props.initValue?.description,\n    },\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n  });\n\n  const radioBtnList = [\"Action\", \"Cmedy\", \"Romance\"];\n\n  console.log(errors);\n\n  return (\n    <Form onSubmit={handleSubmit(props.onSubmit)} className={classes.form}>\n      <FormGroup className={classes.formGroup}>\n        <Label for=\"name\">Name</Label>\n        <Controller\n          name=\"name\"\n          control={control}\n          render={({ field }) => <Input {...field} invalid={!!errors.name} />}\n        />\n        <FormFeedback className={classes.ErrText}>\n          {errors.name?.message}\n        </FormFeedback>\n      </FormGroup>\n\n      <FormGroup>\n        <Label>Genre</Label>\n        {radioBtnList.map((item) => (\n          <FormGroup check>\n            <Label check>\n              <Controller\n                name=\"genre\"\n                control={control}\n                render={({ field }) => (\n                  <Input {...field} value={item} type=\"radio\" name=\"genre\" />\n                )}\n              />\n              {item}\n            </Label>\n          </FormGroup>\n        ))}\n      </FormGroup>\n      <FormGroup>\n        <Label>Realase Date</Label>\n        <Controller\n          name=\"realaseDate\"\n          control={control}\n          render={({ field }) => <Input {...field} invalid type=\"date\" />}\n        />\n      </FormGroup>\n      <FormGroup className={classes.formGroup}>\n        <Label for=\"description\">Description</Label>\n        <Controller\n          control={control}\n          name=\"description\"\n          render={({ field }) => (\n            <Input {...field} invalid={!!errors.description} type=\"textarea\" />\n          )}\n        />\n        <FormFeedback className={classes.ErrText}>\n          {errors.description?.message}\n        </FormFeedback>\n      </FormGroup>\n      <Button>Submit</Button>\n    </Form>\n  );\n};\nexport default MovieForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}