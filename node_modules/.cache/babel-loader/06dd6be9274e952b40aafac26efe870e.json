{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/screens/MoviePage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { getCurrentMovie } from \"redux/Movie/slice\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoviePage = () => {\n  _s();\n\n  const currentMovie = useAppSelector(state => state.Movie.currentMovie);\n  const loading = useAppSelector(state => state.Common.loading);\n  const params = useParams();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    console.log(\"useEffect Moviepage\", !currentMovie, (currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.id.toString()) !== params.id, !loading);\n    (!currentMovie || currentMovie.id.toString() !== params.id) && !loading && dispatch(getCurrentMovie(params.id)); // if (!email) {\n    //   const localStorageEmail = localStorage.getItem(\"email\");\n    //   localStorageEmail && dispatch(setEmail(localStorageEmail));\n    // }\n  }, [params.id]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: \"moviePage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(MoviePage, \"YuyK0R3G5zsSk3+0q1VovJyUfuI=\", false, function () {\n  return [useAppSelector, useAppSelector, useParams, useAppDispatch];\n});\n\n_c = MoviePage;\nexport default MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["Fragment","useEffect","useAppDispatch","useAppSelector","getCurrentMovie","useParams","MoviePage","currentMovie","state","Movie","loading","Common","params","dispatch","console","log","id","toString"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/screens/MoviePage/index.tsx"],"sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\n\nimport MovieList from \"components/screens/HomePage/MovieList\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { getCurrentMovie } from \"redux/Movie/slice\";\nimport { setEmail } from \"redux/Auth/slice\";\nimport { IMovie } from \"types/types\";\nimport { useParams } from \"react-router\";\n\nconst MoviePage = () => {\n  const currentMovie = useAppSelector((state) => state.Movie.currentMovie);\n  const loading = useAppSelector((state) => state.Common.loading);\n\n  const params = useParams();\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    console.log(\n      \"useEffect Moviepage\",\n      !currentMovie,\n      currentMovie?.id.toString() !== params.id,\n      !loading\n    );\n    (!currentMovie || currentMovie.id.toString() !== params.id) &&\n      !loading &&\n      dispatch(getCurrentMovie(params.id));\n    // if (!email) {\n    //   const localStorageEmail = localStorage.getItem(\"email\");\n    //   localStorageEmail && dispatch(setEmail(localStorageEmail));\n    // }\n  }, [params.id]);\n\n  return <Fragment>moviePage</Fragment>;\n};\nexport default MoviePage;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAA8C,OAA9C;AAGA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,aAA/C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAGA,SAASC,SAAT,QAA0B,cAA1B;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAMC,YAAY,GAAGJ,cAAc,CAAEK,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYF,YAAxB,CAAnC;EACA,MAAMG,OAAO,GAAGP,cAAc,CAAEK,KAAD,IAAWA,KAAK,CAACG,MAAN,CAAaD,OAAzB,CAA9B;EAEA,MAAME,MAAM,GAAGP,SAAS,EAAxB;EAEA,MAAMQ,QAAQ,GAAGX,cAAc,EAA/B;EAEAD,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAR,CACE,qBADF,EAEE,CAACR,YAFH,EAGE,CAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAES,EAAd,CAAiBC,QAAjB,QAAgCL,MAAM,CAACI,EAHzC,EAIE,CAACN,OAJH;IAMA,CAAC,CAACH,YAAD,IAAiBA,YAAY,CAACS,EAAb,CAAgBC,QAAhB,OAA+BL,MAAM,CAACI,EAAxD,KACE,CAACN,OADH,IAEEG,QAAQ,CAACT,eAAe,CAACQ,MAAM,CAACI,EAAR,CAAhB,CAFV,CAPc,CAUd;IACA;IACA;IACA;EACD,CAdQ,EAcN,CAACJ,MAAM,CAACI,EAAR,CAdM,CAAT;EAgBA,oBAAO,QAAC,QAAD;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAzBD;;GAAMV,S;UACiBH,c,EACLA,c,EAEDE,S,EAEEH,c;;;KANbI,S;AA0BN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}