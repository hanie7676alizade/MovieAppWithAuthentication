{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/components/screens/LoginPage/LoginForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport classes from \"./LoginForm.module.scss\";\nimport Button from \"components/common/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object({\n  email: yup.string().required(\"this field is required\").matches(/^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/, \"Enter a valid Email Address\"),\n  password: yup.string().required(\"this field is required\").min(4, \"Password is too short - should be 4 chars minimum.\")\n}).required();\n\nconst RegisterForm = props => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    shouldFocusError: true\n  });\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const onSubmit = async data => {\n    props.onSubmit(data);\n  }; // console.log(errors, \"ERR\");\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: [\"Email Address:\", /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"email\", {\n          required: true\n        }),\n        id: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"password\", {\n          required: true\n        }),\n        type: passwordShown ? \"text\" : \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setPasswordShown(!passwordShown),\n        children: \"show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"jgaSrsKRz3ZEqwZ1Pz90jEmOXwM=\", false, function () {\n  return [useForm];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["useForm","useState","yupResolver","yup","classes","Button","schema","object","email","string","required","matches","password","min","RegisterForm","props","register","handleSubmit","formState","errors","resolver","shouldFocusError","passwordShown","setPasswordShown","onSubmit","data","form","message"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/components/screens/LoginPage/LoginForm.tsx"],"sourcesContent":["import { useForm, SubmitHandler } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport { IUserLoginForm } from \"types\";\nimport classes from \"./LoginForm.module.scss\";\nimport Button from \"components/common/Button\";\n\ninterface Iprops {\n  onSubmit: SubmitHandler<IUserLoginForm>;\n}\n\nconst schema = yup\n  .object({\n    email: yup\n      .string()\n      .required(\"this field is required\")\n      .matches(\n        /^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/,\n        \"Enter a valid Email Address\"\n      ),\n    password: yup\n      .string()\n      .required(\"this field is required\")\n      .min(4, \"Password is too short - should be 4 chars minimum.\"),\n  })\n  .required();\n\nconst RegisterForm = (props: Iprops) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IUserLoginForm>({\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n  });\n  const [passwordShown, setPasswordShown] = useState<boolean>(false);\n\n  const onSubmit = async (data: IUserLoginForm) => {\n    props.onSubmit(data);\n  };\n  // console.log(errors, \"ERR\");\n\n  return (\n    <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"email\">\n        Email Address:\n        <input {...register(\"email\", { required: true })} id=\"email\" />\n        {errors.email && <p>{errors.email.message}</p>}\n      </label>\n      <label htmlFor=\"password\">\n        Password:\n        <input\n          {...register(\"password\", { required: true })}\n          type={passwordShown ? \"text\" : \"password\"}\n        />\n        <span onClick={() => setPasswordShown(!passwordShown)}>show</span>\n        {errors.password && <p>{errors.password.message}</p>}\n      </label>\n\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n"],"mappings":";;;AAAA,SAASA,OAAT,QAAuC,iBAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAGA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAMA,MAAMC,MAAM,GAAGH,GAAG,CACfI,MADY,CACL;EACNC,KAAK,EAAEL,GAAG,CACPM,MADI,GAEJC,QAFI,CAEK,wBAFL,EAGJC,OAHI,CAIH,6CAJG,EAKH,6BALG,CADD;EAQNC,QAAQ,EAAET,GAAG,CACVM,MADO,GAEPC,QAFO,CAEE,wBAFF,EAGPG,GAHO,CAGH,CAHG,EAGA,oDAHA;AARJ,CADK,EAcZH,QAdY,EAAf;;AAgBA,MAAMI,YAAY,GAAIC,KAAD,IAAmB;EAAA;;EACtC,MAAM;IACJC,QADI;IAEJC,YAFI;IAGJC,SAAS,EAAE;MAAEC;IAAF;EAHP,IAIFnB,OAAO,CAAiB;IAC1BoB,QAAQ,EAAElB,WAAW,CAACI,MAAD,CADK;IAE1Be,gBAAgB,EAAE;EAFQ,CAAjB,CAJX;EAQA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAU,KAAV,CAAlD;;EAEA,MAAMuB,QAAQ,GAAG,MAAOC,IAAP,IAAgC;IAC/CV,KAAK,CAACS,QAAN,CAAeC,IAAf;EACD,CAFD,CAXsC,CActC;;;EAEA,oBACE;IAAM,SAAS,EAAErB,OAAO,CAACsB,IAAzB;IAA+B,QAAQ,EAAET,YAAY,CAACO,QAAD,CAArD;IAAA,wBACE;MAAO,OAAO,EAAC,OAAf;MAAA,0CAEE,sBAAWR,QAAQ,CAAC,OAAD,EAAU;UAAEN,QAAQ,EAAE;QAAZ,CAAV,CAAnB;QAAkD,EAAE,EAAC;MAArD;QAAA;QAAA;QAAA;MAAA,QAFF,EAGGS,MAAM,CAACX,KAAP,iBAAgB;QAAA,UAAIW,MAAM,CAACX,KAAP,CAAamB;MAAjB;QAAA;QAAA;QAAA;MAAA,QAHnB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAO,OAAO,EAAC,UAAf;MAAA,qCAEE,sBACMX,QAAQ,CAAC,UAAD,EAAa;UAAEN,QAAQ,EAAE;QAAZ,CAAb,CADd;QAEE,IAAI,EAAEY,aAAa,GAAG,MAAH,GAAY;MAFjC;QAAA;QAAA;QAAA;MAAA,QAFF,eAME;QAAM,OAAO,EAAE,MAAMC,gBAAgB,CAAC,CAACD,aAAF,CAArC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANF,EAOGH,MAAM,CAACP,QAAP,iBAAmB;QAAA,UAAIO,MAAM,CAACP,QAAP,CAAgBe;MAApB;QAAA;QAAA;QAAA;MAAA,QAPtB;IAAA;MAAA;MAAA;MAAA;IAAA,QANF,eAgBE,QAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAhBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CApCD;;GAAMb,Y;UAKAd,O;;;KALAc,Y;AAsCN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}