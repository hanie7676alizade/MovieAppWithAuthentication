{"ast":null,"code":"var _jsxFileName = \"/home/hanie/Documents/demoProjects/movie-suggest/src/HOC/WithPopUp/index.tsx\";\nimport React, { Fragment, useRef } from \"react\";\nimport { Button } from \"reactstrap\";\nimport { setPopUp } from \"redux/Common/slice\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport classes from \"./style.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WithPopUp(WrappedComponent) {\n  var _s = $RefreshSig$();\n\n  const Component = props => {\n    _s();\n\n    const sectionRef = useRef(null);\n    const dispatch = useAppDispatch();\n    const popUpStateStore = useAppSelector(state => state.Common.popUpState);\n    const popUpTextStore = useAppSelector(state => state.Common.popUpText);\n    const popUpButtonsStore = useAppSelector(state => state.Common.popUpButtons);\n\n    const onClose = () => {\n      dispatch(setPopUp({\n        state: false,\n        text: \"\",\n        buttons: []\n      }));\n    };\n\n    const checkOnBlur = e => {\n      if (e.target === sectionRef.current) onClose();\n    };\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [popUpStateStore && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Section,\n        onClick: checkOnBlur,\n        ref: sectionRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.popUpWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.popUp,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: popUpTextStore\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.buttons,\n              children: popUpButtonsStore.map((item, index) => /*#__PURE__*/_jsxDEV(Button, {\n                color: item.color,\n                size: \"md\",\n                onClick: () => item.isCloseBTN ? onClose() : item.onClick(),\n                children: item.value\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WrappedComponent, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Component, \"8aDuUNHCu3IUpMJ595JJ7V6yUf4=\", false, function () {\n    return [useAppDispatch, useAppSelector, useAppSelector, useAppSelector];\n  });\n\n  return Component;\n}\n_c = WithPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithPopUp\");","map":{"version":3,"names":["React","Fragment","useRef","Button","setPopUp","useAppDispatch","useAppSelector","classes","WithPopUp","WrappedComponent","Component","props","sectionRef","dispatch","popUpStateStore","state","Common","popUpState","popUpTextStore","popUpText","popUpButtonsStore","popUpButtons","onClose","text","buttons","checkOnBlur","e","target","current","Section","popUpWrapper","popUp","map","item","index","color","isCloseBTN","onClick","value"],"sources":["/home/hanie/Documents/demoProjects/movie-suggest/src/HOC/WithPopUp/index.tsx"],"sourcesContent":["import React, { Fragment, useRef, ComponentType } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nimport { setPopUp } from \"redux/Common/slice\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport classes from \"./style.module.scss\";\r\n\r\nexport default function WithPopUp<T>(WrappedComponent: ComponentType<T>) {\r\n  const Component = (props: T) => {\r\n    const sectionRef = useRef(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const popUpStateStore = useAppSelector((state) => state.Common.popUpState);\r\n    const popUpTextStore = useAppSelector((state) => state.Common.popUpText);\r\n    const popUpButtonsStore = useAppSelector(\r\n      (state) => state.Common.popUpButtons\r\n    );\r\n\r\n    const onClose = () => {\r\n      dispatch(setPopUp({ state: false, text: \"\", buttons: [] }));\r\n    };\r\n\r\n    const checkOnBlur = (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (e.target === sectionRef.current) onClose();\r\n    };\r\n\r\n    return (\r\n      <Fragment>\r\n        {popUpStateStore && (\r\n          <div\r\n            className={classes.Section}\r\n            onClick={checkOnBlur}\r\n            ref={sectionRef}\r\n          >\r\n            <div className={classes.popUpWrapper}>\r\n              <div className={classes.popUp}>\r\n                <span>{popUpTextStore}</span>\r\n                <div className={classes.buttons}>\r\n                  {popUpButtonsStore.map((item, index) => (\r\n                    <Button\r\n                      key={index}\r\n                      color={item.color}\r\n                      size=\"md\"\r\n                      onClick={() =>\r\n                        item.isCloseBTN ? onClose() : item.onClick()\r\n                      }\r\n                    >\r\n                      {item.value}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <WrappedComponent {...props} />\r\n      </Fragment>\r\n    );\r\n  };\r\n  return Component;\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAuD,OAAvD;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,aAA/C;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,eAAe,SAASC,SAAT,CAAsBC,gBAAtB,EAA0D;EAAA;;EACvE,MAAMC,SAAS,GAAIC,KAAD,IAAc;IAAA;;IAC9B,MAAMC,UAAU,GAAGV,MAAM,CAAC,IAAD,CAAzB;IAEA,MAAMW,QAAQ,GAAGR,cAAc,EAA/B;IAEA,MAAMS,eAAe,GAAGR,cAAc,CAAES,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaC,UAAzB,CAAtC;IACA,MAAMC,cAAc,GAAGZ,cAAc,CAAES,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaG,SAAzB,CAArC;IACA,MAAMC,iBAAiB,GAAGd,cAAc,CACrCS,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaK,YADc,CAAxC;;IAIA,MAAMC,OAAO,GAAG,MAAM;MACpBT,QAAQ,CAACT,QAAQ,CAAC;QAAEW,KAAK,EAAE,KAAT;QAAgBQ,IAAI,EAAE,EAAtB;QAA0BC,OAAO,EAAE;MAAnC,CAAD,CAAT,CAAR;IACD,CAFD;;IAIA,MAAMC,WAAW,GAAIC,CAAD,IAAyC;MAC3D,IAAIA,CAAC,CAACC,MAAF,KAAaf,UAAU,CAACgB,OAA5B,EAAqCN,OAAO;IAC7C,CAFD;;IAIA,oBACE,QAAC,QAAD;MAAA,WACGR,eAAe,iBACd;QACE,SAAS,EAAEP,OAAO,CAACsB,OADrB;QAEE,OAAO,EAAEJ,WAFX;QAGE,GAAG,EAAEb,UAHP;QAAA,uBAKE;UAAK,SAAS,EAAEL,OAAO,CAACuB,YAAxB;UAAA,uBACE;YAAK,SAAS,EAAEvB,OAAO,CAACwB,KAAxB;YAAA,wBACE;cAAA,UAAOb;YAAP;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAK,SAAS,EAAEX,OAAO,CAACiB,OAAxB;cAAA,UACGJ,iBAAiB,CAACY,GAAlB,CAAsB,CAACC,IAAD,EAAOC,KAAP,kBACrB,QAAC,MAAD;gBAEE,KAAK,EAAED,IAAI,CAACE,KAFd;gBAGE,IAAI,EAAC,IAHP;gBAIE,OAAO,EAAE,MACPF,IAAI,CAACG,UAAL,GAAkBd,OAAO,EAAzB,GAA8BW,IAAI,CAACI,OAAL,EALlC;gBAAA,UAQGJ,IAAI,CAACK;cARR,GACOJ,KADP;gBAAA;gBAAA;gBAAA;cAAA,QADD;YADH;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MALF;QAAA;QAAA;QAAA;MAAA,QAFJ,eA4BE,QAAC,gBAAD,OAAsBvB;MAAtB;QAAA;QAAA;QAAA;MAAA,QA5BF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAgCD,CAnDD;;EADuE,GACjED,SADiE;IAAA,QAIpDL,cAJoD,EAM7CC,cAN6C,EAO9CA,cAP8C,EAQ3CA,cAR2C;EAAA;;EAqDvE,OAAOI,SAAP;AACD;KAtDuBF,S"},"metadata":{},"sourceType":"module"}